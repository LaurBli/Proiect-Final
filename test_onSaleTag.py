# Generated by Selenium IDE
import time

from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.wait import WebDriverWait


class TestOnSaleTag():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_onSaleTag(self):
    # Test name: onSaleTag
    # Step # | name | target | value
    # 1 | open | http://34.118.122.203/administration/index.php?controller=AdminLogin&token=1e53b83c6f3b96a3ca75976d5bab155e | 
    self.driver.get("http://34.118.122.203/administration/index.php?controller=AdminLogin&token=1e53b83c6f3b96a3ca75976d5bab155e")
    # 2 | setWindowSize | 1936x1056 | 
    self.driver.set_window_size(1936, 1056)
    # 3 | click | id=email | 
    self.driver.find_element(By.ID, "email").click()
    # 4 | type | id=email | user@example.com
    self.driver.find_element(By.ID, "email").send_keys("user@example.com")
    # 5 | click | id=passwd | 
    self.driver.find_element(By.ID, "passwd").click()
    # 6 | type | id=passwd | VTR6WmtBCvnZ
    self.driver.find_element(By.ID, "passwd").send_keys("VTR6WmtBCvnZ")
    # 7 | click | css=.ladda-label | 
    self.driver.find_element(By.CSS_SELECTOR, ".ladda-label").click()
    WebDriverWait(self.driver, 10).until(lambda s: s.find_element(By.CSS_SELECTOR, "#subtab-AdminCatalog span"))
    # 8 | click | css=#subtab-AdminCatalog span | 
    self.driver.find_element(By.CSS_SELECTOR, "#subtab-AdminCatalog span").click()
    WebDriverWait(self.driver, 10).until(lambda s: s.find_element(By.LINK_TEXT, "Products"))
    # 9 | click | linkText=Products | 
    self.driver.find_element(By.LINK_TEXT, "Products").click()
    # 10 | click | name=filter_column_name | 
    self.driver.find_element(By.NAME, "filter_column_name").click()
    self.driver.find_element(By.NAME, "filter_column_name").clear()
    self.driver.find_element(By.NAME, "filter_column_name").send_keys('suburbia')
    # 11 | click | name=products_filter_submit | 
    self.driver.find_element(By.NAME, "products_filter_submit").click()
    # 12 | click | linkText=Suburbia: Collector's Edition | 
    self.driver.find_element(By.LINK_TEXT, "Suburbia: Collector\'s Edition").click()
    # 13 | click | linkText=Pricing | 
    self.driver.find_element(By.LINK_TEXT, "Pricing").click()
    # 14 | click | id=form_step2_on_sale | 
    self.driver.find_element(By.ID, "form_step2_on_sale").click()
    # 15 | mouseOver | id=submit | 
    element = self.driver.find_element(By.ID, "submit")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 16 | click | id=submit | 
    self.driver.find_element(By.ID, "submit").click()
    # 17 | mouseOut | id=submit | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element_with_offset(element, 0, 0).perform()
    # 18 | click | css=#tab-AdminDashboard > .link | 
    self.driver.find_element(By.CSS_SELECTOR, "#tab-AdminDashboard > .link").click()
    # 19 | mouseOver | css=#tab-AdminDashboard > .link | 
    element = self.driver.find_element(By.CSS_SELECTOR, "#tab-AdminDashboard > .link")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 20 | click | css=#header_shopname > span | 
    self.vars["window_handles"] = self.driver.window_handles
    # 21 | selectWindow | handle=${win2688} | 
    self.driver.find_element(By.CSS_SELECTOR, "#header_shopname > span").click()
    # 22 | click | name=s | 
    self.vars["win2688"] = self.wait_for_window(2000)
    # 23 | type | name=s | suburbia
    self.driver.switch_to.window(self.vars["win2688"])
    # 24 | sendKeys | name=s | ${KEY_ENTER}
    self.driver.find_element(By.NAME, "s").click()
    # 25 | click | css=.thumbnail > img | 
    self.driver.find_element(By.NAME, "s").send_keys("suburbia")
    # 26 | click | id=email | 
    self.driver.find_element(By.NAME, "s").send_keys(Keys.ENTER)
    assert 'on sale!' in self.driver.find_element(By.ID,'js-product-list').text.lower()
    # 27 | type | id=email | user@example.com
    self.driver.find_element(By.CSS_SELECTOR, ".thumbnail > img").click()
    assert 'on sale!' in self.driver.find_element(By.ID,'content').text.lower()
    self.driver.get("http://34.118.122.203/administration/index.php?controller=AdminLogin&token=1e53b83c6f3b96a3ca75976d5bab155e")
    # 28 | click | id=passwd | 
    self.driver.find_element(By.ID, "email").click()
    # 29 | type | id=passwd | VTR6WmtBCvnZ
    self.driver.find_element(By.ID, "email").send_keys("user@example.com")
    # 30 | click | id=submit_login | 
    self.driver.find_element(By.ID, "passwd").click()
    # 31 | click | css=#subtab-AdminCatalog > .link | 
    self.driver.find_element(By.ID, "passwd").send_keys("VTR6WmtBCvnZ")
    # 32 | click | linkText=Products | 
    self.driver.find_element(By.ID, "submit_login").click()
    WebDriverWait(self.driver, 10).until(lambda s: s.find_element(By.CSS_SELECTOR, "#subtab-AdminCatalog > .link"))
    # 33 | click | name=filter_column_name | 
    self.driver.find_element(By.CSS_SELECTOR, "#subtab-AdminCatalog > .link").click()
    WebDriverWait(self.driver, 10).until(lambda s: s.find_element(By.LINK_TEXT, "Products"))
    # 34 | click | name=products_filter_submit | 
    self.driver.find_element(By.LINK_TEXT, "Products").click()
    # 35 | click | linkText=Suburbia: Collector's Edition | 
    self.driver.find_element(By.NAME, "filter_column_name").click()
    self.driver.find_element(By.NAME, "filter_column_name").clear()
    self.driver.find_element(By.NAME, "filter_column_name").send_keys('suburbia')
    # 36 | click | linkText=Pricing | 
    self.driver.find_element(By.NAME, "products_filter_submit").click()
    # 37 | click | id=form_step2_on_sale | 
    self.driver.find_element(By.LINK_TEXT, "Suburbia: Collector\'s Edition").click()
    # 38 | mouseOver | id=submit | 
    self.driver.find_element(By.LINK_TEXT, "Pricing").click()
    # 39 | click | id=submit | 
    self.driver.find_element(By.ID, "form_step2_on_sale").click()
    # 40 | mouseOut | id=submit | 
    element = self.driver.find_element(By.ID, "submit")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 41 | click | css=#tab-AdminDashboard span | 
    self.driver.find_element(By.ID, "submit").click()
    # 42 | click | css=#header_shopname > span | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element_with_offset(element, 0, 0).perform()
    # 43 | selectWindow | handle=${win1156} | 
    self.driver.find_element(By.CSS_SELECTOR, "#tab-AdminDashboard span").click()
    # 44 | click | name=s | 
    self.vars["window_handles"] = self.driver.window_handles
    # 45 | type | name=s | suburbia
    self.driver.find_element(By.CSS_SELECTOR, "#header_shopname > span").click()
    # 46 | sendKeys | name=s | ${KEY_ENTER}
    self.vars["win1156"] = self.wait_for_window(2000)
    # 47 | click | css=.thumbnail > img | 
    self.driver.switch_to.window(self.vars["win1156"])
    self.driver.find_element(By.NAME, "s").click()
    self.driver.find_element(By.NAME, "s").clear()
    self.driver.find_element(By.NAME, "s").send_keys("suburbia")
    self.driver.find_element(By.NAME, "s").send_keys(Keys.ENTER)
    assert 'on sale!' not in self.driver.find_element(By.ID, 'js-product-list').text.lower()
    self.driver.find_element(By.CSS_SELECTOR, ".thumbnail > img").click()
    assert 'on sale!' not in self.driver.find_element(By.ID, 'content').text.lower()
